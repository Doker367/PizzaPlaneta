// <auto-generated />
using System;
using ManyBoxApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManyBoxApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250906143344_Notificacion")]
    partial class Notificacion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Envio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<int?>("DireccionId")
                        .HasColumnType("int")
                        .HasColumnName("direccion_id");

                    b.Property<string>("EstadoEnvio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estado_envio");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_entrega");

                    b.Property<string>("GuiaRastreo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("guia_rastreo");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("tipo");

                    b.Property<int?>("UsuarioAsignadoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_asignado_id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("DireccionId");

                    b.ToTable("Envios");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Conversacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Archivada")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Archivada");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creado_por");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext")
                        .HasColumnName("nombre");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("conversaciones");
                });

            modelBuilder.Entity("ManyBoxApi.Models.ConversacionParticipante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ConversacionId")
                        .HasColumnType("int")
                        .HasColumnName("conversacion_id");

                    b.Property<DateTime?>("FechaUnion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_union");

                    b.Property<string>("Rol")
                        .HasColumnType("longtext")
                        .HasColumnName("rol");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("ConversacionId");

                    b.ToTable("conversacionparticipantes");
                });

            modelBuilder.Entity("ManyBoxApi.Models.DetalleVenta", b =>
                {
                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("VentaId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ciudad");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("DireccionTexto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("direccion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pais");

                    b.HasKey("Id");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Correo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int")
                        .HasColumnName("sucursal_id");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("ManyBoxApi.Models.MensajeChat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("ArchivoNombreOriginal")
                        .HasColumnType("longtext")
                        .HasColumnName("archivo_nombre_original");

                    b.Property<string>("ArchivoUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("archivo_url");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mensaje");

                    b.Property<int>("ConversacionId")
                        .HasColumnType("int")
                        .HasColumnName("conversacion_id");

                    b.Property<bool>("Editado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("editado");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("eliminado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<long?>("ReplyToId")
                        .HasColumnType("bigint")
                        .HasColumnName("reply_to_id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("ConversacionId");

                    b.ToTable("mensajeschat");
                });

            modelBuilder.Entity("ManyBoxApi.Models.MensajeLeido", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaEstado")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_estado");

                    b.Property<long>("MensajeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mensaje_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.ToTable("mensajesleidos");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Datos")
                        .HasColumnType("longtext")
                        .HasColumnName("datos");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Estado")
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("Expiracion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiracion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Idioma")
                        .HasColumnType("longtext")
                        .HasColumnName("idioma");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("mensaje");

                    b.Property<int?>("ObjetoId")
                        .HasColumnType("int")
                        .HasColumnName("objeto_id");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("prioridad");

                    b.Property<int?>("RemitenteId")
                        .HasColumnType("int")
                        .HasColumnName("remitente_id");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.Property<string>("TipoObjeto")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_objeto");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("titulo");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("notificaciones");
                });

            modelBuilder.Entity("ManyBoxApi.Models.NotificacionDestinatario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int")
                        .HasColumnName("notificacion_id");

                    b.Property<int?>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int")
                        .HasColumnName("sucursal_id");

                    b.Property<string>("TipoDestinatario")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_destinatario");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("NotificacionId");

                    b.HasIndex("RolId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("notificaciondestinatarios");
                });

            modelBuilder.Entity("ManyBoxApi.Models.NotificacionEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("canal");

                    b.Property<string>("DeviceId")
                        .HasColumnType("longtext")
                        .HasColumnName("device_id");

                    b.Property<string>("Error")
                        .HasColumnType("longtext")
                        .HasColumnName("error");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_envio");

                    b.Property<DateTime?>("FechaLeido")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("fecha_leido");

                    b.Property<int>("IntentosEnvio")
                        .HasColumnType("int")
                        .HasColumnName("intentos_envio");

                    b.Property<int>("NotificacionId")
                        .HasColumnType("int")
                        .HasColumnName("notificacion_id");

                    b.Property<string>("UltimoError")
                        .HasColumnType("longtext")
                        .HasColumnName("ultimo_error");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("NotificacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("notificacionentregas");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Permisos")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("empleado_id");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Cliente_Id")
                        .HasColumnType("int");

                    b.Property<string>("Compania_Envio")
                        .HasColumnType("longtext");

                    b.Property<string>("Contenido")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Costo_Envio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Destinatario_Ciudad")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Compania")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Cp")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Estado")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Pais")
                        .HasColumnType("longtext");

                    b.Property<string>("Destinatario_Telefono")
                        .HasColumnType("longtext");

                    b.Property<int?>("Empleado_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Folio")
                        .HasColumnType("longtext");

                    b.Property<string>("Medidas")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Peso_Fisico")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Peso_Volumetrico")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Remitente_Ciudad")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Compania")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Cp")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Direccion")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Estado")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Nombre")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Pais")
                        .HasColumnType("longtext");

                    b.Property<string>("Remitente_Telefono")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Seguro")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Sucursal_Id")
                        .HasColumnType("int");

                    b.Property<string>("Tiempo_Estimado")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo_Pago")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo_Riesgo")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Total_Cobrado")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("Total_Piezas")
                        .HasColumnType("int");

                    b.Property<decimal?>("Valor_Declarado")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Envio", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("ManyBoxApi.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("DireccionId");

                    b.Navigation("Cliente");

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("ManyBoxApi.Models.ConversacionParticipante", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Conversacion", null)
                        .WithMany("Participantes")
                        .HasForeignKey("ConversacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManyBoxApi.Models.DetalleVenta", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Producto", "Producto")
                        .WithMany("DetalleProducto")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManyBoxApi.Models.Venta", "Venta")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Empleado", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("ManyBoxApi.Models.MensajeChat", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Conversacion", null)
                        .WithMany("Mensajes")
                        .HasForeignKey("ConversacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManyBoxApi.Models.Notificacion", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Usuario", null)
                        .WithMany("NotificacionesEnviadas")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("ManyBoxApi.Models.NotificacionDestinatario", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Notificacion", "Notificacion")
                        .WithMany("Destinatarios")
                        .HasForeignKey("NotificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManyBoxApi.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId");

                    b.HasOne("ManyBoxApi.Models.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId");

                    b.HasOne("ManyBoxApi.Models.Usuario", "Usuario")
                        .WithMany("NotificacionesRecibidas")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Notificacion");

                    b.Navigation("Rol");

                    b.Navigation("Sucursal");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ManyBoxApi.Models.NotificacionEntrega", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Notificacion", "Notificacion")
                        .WithMany("Entregas")
                        .HasForeignKey("NotificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManyBoxApi.Models.Usuario", "Usuario")
                        .WithMany("Entregas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Usuario", b =>
                {
                    b.HasOne("ManyBoxApi.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("ManyBoxApi.Models.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Conversacion", b =>
                {
                    b.Navigation("Mensajes");

                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Notificacion", b =>
                {
                    b.Navigation("Destinatarios");

                    b.Navigation("Entregas");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Producto", b =>
                {
                    b.Navigation("DetalleProducto");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Usuario", b =>
                {
                    b.Navigation("Entregas");

                    b.Navigation("NotificacionesEnviadas");

                    b.Navigation("NotificacionesRecibidas");
                });

            modelBuilder.Entity("ManyBoxApi.Models.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
