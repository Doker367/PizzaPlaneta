@page "/dhl/track-shipment"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using ManyBox.Components.Shared
@inject HttpClient Http

@if (OperatingSystem.IsWindows())
{
    <div class="main-content">
        <div class="page-header">
            <h1 class="page-title">DHL - Seguimiento de Envío</h1>
            <p class="page-subtitle">Rastrea tus envíos de DHL.</p>
        </div>

        <div class="card">
            <div class="card-body">
                <EditForm Model="@trackingNumber" OnValidSubmit="HandleValidSubmit">
                    <div class="form-group">
                        <label for="trackingNumber">Número de Seguimiento</label>
                        <InputText id="trackingNumber" class="form-control" @bind-Value="trackingNumber" />
                    </div>
                    <button type="submit" class="btn btn-primary">Rastrear</button>
                </EditForm>
            </div>
        </div>

        @if (trackingResult?.Shipments?.Count > 0)
        {
            @foreach (var s in trackingResult.Shipments)
            {
                <section class="tracking-card">
                    <header class="tracking-header">
                        <div>
                            <div class="tracking-number">Guía: <strong>@s.ShipmentTrackingNumber</strong></div>
                            <div class="tracking-sub">Producto: @s.ProductCode</div>
                        </div>
                        <div class="tracking-status">
                            <span class="badge @GetStatusClass(s.Status)">@s.Status</span>
                        </div>
                    </header>

                    <div class="tracking-body">
                        <div class="tracking-row">
                            <div>
                                <div class="label">Fecha Envío</div>
                                <div>@(s.ShipmentTimestamp?.ToLocalTime().ToString("yyyy-MM-dd HH:mm"))</div>
                            </div>
                            <div>
                                <div class="label">Descripción</div>
                                <div>@(string.IsNullOrWhiteSpace(s.Description) ? "-" : s.Description)</div>
                            </div>
                        </div>

                        <div class="events">
                            <h5>Eventos</h5>
                            @if (s.Events?.Count > 0)
                            {
                                <table class="events-table">
                                    <thead>
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Hora</th>
                                            <th>Código</th>
                                            <th>Descripción</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var e in s.Events!)
                                        {
                                            <tr>
                                                <td>@e.Date</td>
                                                <td>@e.Time</td>
                                                <td>@e.TypeCode</td>
                                                <td>@e.Description</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div class="no-events">Sin eventos</div>
                            }
                        </div>
                    </div>
                </section>
            }
        }

        @if (!string.IsNullOrWhiteSpace(apiResponse))
        {
            <ApiResponseViewer Title="Respuesta de la API" Json="@apiResponse" />
        }
    </div>
}

@code {
    private string trackingNumber = string.Empty;
    private string apiResponse = string.Empty;
    private DhlTrackingResponse? trackingResult;

    private static readonly JsonSerializerOptions JsonOpts = new()
    {
        PropertyNameCaseInsensitive = true,
        NumberHandling = JsonNumberHandling.AllowReadingFromString
    };

    private async Task HandleValidSubmit()
    {
        trackingResult = null;
        apiResponse = string.Empty;
        if (string.IsNullOrWhiteSpace(trackingNumber)) return;

        try
        {
            var response = await Http.GetAsync($"http://100.64.197.11:5000/api/dhl/tracking?trackingNumbers={trackingNumber}");
            apiResponse = await response.Content.ReadAsStringAsync();

            try
            {
                trackingResult = JsonSerializer.Deserialize<DhlTrackingResponse>(apiResponse, JsonOpts);
            }
            catch
            {
                trackingResult = null; // Si falla la deserialización, solo mostramos el JSON crudo
            }
        }
        catch (Exception ex)
        {
            apiResponse = $"Error: {ex.Message}";
            trackingResult = null;
        }
    }

    private static string GetStatusClass(string? status)
    {
        status = (status ?? string.Empty).ToLowerInvariant();
        return status switch
        {
            "success" or "delivered" => "badge-success",
            "in-transit" or "transit" => "badge-info",
            "failure" or "exception" => "badge-danger",
            _ => "badge-secondary"
        };
    }

    private sealed class DhlTrackingResponse
    {
        [JsonPropertyName("shipments")] public List<DhlShipment> Shipments { get; set; } = new();
    }

    private sealed class DhlShipment
    {
        [JsonPropertyName("shipmentTrackingNumber")] public string ShipmentTrackingNumber { get; set; } = string.Empty;
        [JsonPropertyName("status")] public string Status { get; set; } = string.Empty;
        [JsonPropertyName("shipmentTimestamp")] public DateTimeOffset? ShipmentTimestamp { get; set; }
            = null;
        [JsonPropertyName("productCode")] public string? ProductCode { get; set; }
        [JsonPropertyName("description")] public string? Description { get; set; }
        [JsonPropertyName("events")] public List<DhlEvent> Events { get; set; } = new();
    }

    private sealed class DhlEvent
    {
        [JsonPropertyName("date")] public string? Date { get; set; }
        [JsonPropertyName("time")] public string? Time { get; set; }
        [JsonPropertyName("typeCode")] public string? TypeCode { get; set; }
        [JsonPropertyName("description")] public string? Description { get; set; }
    }
}
