@page "/dhl/address-validate"
@using ManyBox.Models.Dhl
@using System.Net.Http
@using System.Web
@using System.Text.Json
@using System.Text.Json.Serialization
@using ManyBox.Components.Shared
@inject HttpClient Http

@if (OperatingSystem.IsWindows())
{
    <div class="main-content">
        <div class="page-header">
            <h1 class="page-title">DHL - Validación de Dirección</h1>
            <p class="page-subtitle">Valida una dirección con DHL.</p>
        </div>

        <div class="card">
            <div class="card-body">
                <EditForm Model="@addressValidateRequest" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="type">Tipo</label>
                        <InputText id="type" class="form-control" @bind-Value="addressValidateRequest.Type" placeholder="pickup o delivery" />
                        <ValidationMessage For="@(() => addressValidateRequest.Type)" />
                    </div>
                    <div class="form-group">
                        <label for="countryCode">Código de País</label>
                        <InputText id="countryCode" class="form-control" @bind-Value="addressValidateRequest.CountryCode" />
                        <ValidationMessage For="@(() => addressValidateRequest.CountryCode)" />
                    </div>
                    <div class="form-group">
                        <label for="postalCode">Código Postal</label>
                        <InputText id="postalCode" class="form-control" @bind-Value="addressValidateRequest.PostalCode" />
                    </div>
                    <div class="form-group">
                        <label for="cityName">Ciudad</label>
                        <InputText id="cityName" class="form-control" @bind-Value="addressValidateRequest.CityName" />
                    </div>
                    <div class="form-group">
                        <label for="countyName">Condado</label>
                        <InputText id="countyName" class="form-control" @bind-Value="addressValidateRequest.CountyName" />
                    </div>
                    <div class="form-check">
                        <InputCheckbox id="strictValidation" class="form-check-input" @bind-Value="strictValidation" />
                        <label for="strictValidation" class="form-check-label">Validación Estricta</label>
                    </div>
                    <button type="submit" class="btn btn-primary">Validar Dirección</button>
                </EditForm>
            </div>
        </div>

        @if (validateResult is not null)
        {
            <section class="tracking-card" style="margin-top:1rem;">
                <header class="tracking-header">
                    <div>
                        <div class="tracking-number">Resultado</div>
                        <div class="tracking-sub">Se encontraron @validateResult.Address.Count dirección(es)</div>
                    </div>
                </header>
                <div class="tracking-body">
                    @if (validateResult.Warnings?.Count > 0)
                    {
                        <div class="mb-2">
                            <div class="label">Avisos</div>
                            <ul>
                                @foreach (var w in validateResult.Warnings)
                                {
                                    <li>@w</li>
                                }
                            </ul>
                        </div>
                    }

                    @for (int i = 0; i < validateResult.Address.Count; i++)
                    {
                        var a = validateResult.Address[i];
                        <div class="tracking-card" style="margin-top:.75rem;">
                            <div class="tracking-body">
                                <div class="tracking-row">
                                    <div>
                                        <div class="label">País</div>
                                        <div>@a.CountryCode</div>
                                    </div>
                                    <div>
                                        <div class="label">Código Postal</div>
                                        <div>@a.PostalCode</div>
                                    </div>
                                    <div>
                                        <div class="label">Ciudad</div>
                                        <div>@a.CityName</div>
                                    </div>
                                    <div>
                                        <div class="label">Condado</div>
                                        <div>@(string.IsNullOrWhiteSpace(a.CountyName) ? "-" : a.CountyName)</div>
                                    </div>
                                </div>

                                <div style="margin-top:.5rem;">
                                    <div class="label">Área de Servicio</div>
                                    <div class="tracking-row">
                                        <div>
                                            <div class="label">Código</div>
                                            <div>@a.ServiceArea?.Code</div>
                                        </div>
                                        <div>
                                            <div class="label">Descripción</div>
                                            <div>@a.ServiceArea?.Description</div>
                                        </div>
                                        <div>
                                            <div class="label">GMT Offset</div>
                                            <div>@a.ServiceArea?.GMTOffset</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </section>
        }

        @if (!string.IsNullOrWhiteSpace(apiResponse))
        {
            <ApiResponseViewer Title="Respuesta de la API" Json="@apiResponse" />
        }
    </div>
}

@code {
    private DhlAddressValidateRequest addressValidateRequest = new DhlAddressValidateRequest {
        Type = string.Empty,
        CountryCode = string.Empty
    };
    private bool strictValidation = false;
    private string apiResponse = string.Empty;
    private DhlAddressValidateResponse? validateResult;

    private static readonly JsonSerializerOptions JsonOpts = new()
    {
        PropertyNameCaseInsensitive = true
    };

    private async Task HandleValidSubmit()
    {
        addressValidateRequest.StrictValidation = strictValidation;
        var builder = new UriBuilder("http://100.64.197.11:5000/api/dhl/address-validate");
        var query = HttpUtility.ParseQueryString(string.Empty);
        query["type"] = addressValidateRequest.Type;
        query["countryCode"] = addressValidateRequest.CountryCode;
        query["postalCode"] = addressValidateRequest.PostalCode;
        query["cityName"] = addressValidateRequest.CityName;
        query["countyName"] = addressValidateRequest.CountyName;
        if (addressValidateRequest.StrictValidation.HasValue)
        {
            query["strictValidation"] = addressValidateRequest.StrictValidation.Value.ToString();
        }
        builder.Query = query.ToString();

        try
        {
            validateResult = null;
            var response = await Http.GetAsync(builder.ToString());
            apiResponse = await response.Content.ReadAsStringAsync();
            try
            {
                validateResult = JsonSerializer.Deserialize<DhlAddressValidateResponse>(apiResponse, JsonOpts);
            }
            catch
            {
                validateResult = null;
            }
        }
        catch (Exception ex)
        {
            apiResponse = $"Error: {ex.Message}";
            validateResult = null;
        }
    }

    private sealed class DhlAddressValidateResponse
    {
        [JsonPropertyName("warnings")] public List<string>? Warnings { get; set; }
        [JsonPropertyName("address")] public List<ValidatedAddress> Address { get; set; } = new();
    }
    private sealed class ValidatedAddress
    {
        [JsonPropertyName("countryCode")] public string CountryCode { get; set; } = string.Empty;
        [JsonPropertyName("postalCode")] public string PostalCode { get; set; } = string.Empty;
        [JsonPropertyName("cityName")] public string CityName { get; set; } = string.Empty;
        [JsonPropertyName("countyName")] public string? CountyName { get; set; }
        [JsonPropertyName("serviceArea")] public ServiceArea? ServiceArea { get; set; }
    }
    private sealed class ServiceArea
    {
        [JsonPropertyName("code")] public string? Code { get; set; }
        [JsonPropertyName("description")] public string? Description { get; set; }
        [JsonPropertyName("GMTOffset")] public string? GMTOffset { get; set; }
    }
}
