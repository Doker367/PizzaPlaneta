@page "/crear-grupo"
@using ManyBox.Models.Custom
@using ManyBox.Services
@inject ChatApiService ChatService
@inject NavigationManager Navigation
@inject UserService UserService
@using Microsoft.Maui.Storage

<div class="contactos-container">
    <div class="contactos-header">
        <h2>Crear nuevo grupo</h2>
    </div>
    <div class="contactos-modal" style="max-width: 480px; margin: 0 auto;">
        <div style="display: flex; flex-direction: column; gap: 16px;">
            <div>
                <label>Nombre del grupo:</label>
                <input @bind="newGroupName" placeholder="Nombre del grupo" class="form-control" />
            </div>
            <div style="display: flex; gap: 8px; align-items: flex-end;">
                <div style="flex: 2;">
                    <label>Buscar contacto:</label>
                    <div style="display: flex; gap: 8px;">
                        <input class="form-control" placeholder="Buscar..." @bind="modalSearchTerm" @bind:event="oninput" />
                        <button class="mb-btn-primary" @onclick="BuscarContactos" style="border-radius: 8px;">Buscar</button>
                    </div>
                </div>
                <div style="flex: 1;">
                    <label>Sucursal:</label>
                    <select class="form-control" @bind="modalSelectedSucursalId">
                        <option value="">Todas</option>
                        @foreach (var suc in sucursales)
                        {
                            <option value="@suc.Id">@suc.Nombre</option>
                        }
                    </select>
                </div>
            </div>
            <div style="max-height: 260px; overflow-y: auto; margin-top: 8px;">
                @foreach (var contact in modalContactos)
                {
                    <label class="miembro-item" style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
                        <input type="checkbox" @bind="contact.Selected" />
                        <span style="font-weight: 500;">@contact.Nombre @contact.Apellido</span>
                        <span style="color:#aaa; font-size:0.95em;">(@contact.SucursalNombre)</span>
                    </label>
                }
            </div>
            <div style="font-size:0.95em; color:#888; margin-bottom: 4px;">@modalContactos.Count(c => c.Selected) miembros seleccionados</div>
            <div class="modal-actions" style="display: flex; justify-content: flex-end; gap: 12px;">
                <button class="btn btn-secondary" @onclick="VolverAContactos" style="border-radius: 8px;">Cancelar</button>
                <button class="mb-btn-primary mb-btn-gradient" @onclick="CreateGroup" disabled="@(string.IsNullOrWhiteSpace(newGroupName) || modalContactos.Count(c => c.Selected) < 2)" style="border-radius: 8px;">Crear Grupo</button>
            </div>
            @if (showGroupValidationError)
            {
                <div style="color: #e74c3c; font-size: 0.95em;">Debes ingresar un nombre y seleccionar al menos 2 miembros.</div>
            }
        </div>
    </div>
</div>

@code {
    private List<SucursalModel> sucursales = new();
    private string newGroupName = "";
    private string modalSearchTerm = "";
    private int? modalSelectedSucursalId;
    private List<UsuarioContactoVM> modalContactos = new();
    private bool showGroupValidationError = false;
    private int myUserIdInt;

    protected override async Task OnInitializedAsync()
    {
        myUserIdInt = Preferences.Default.Get("idUsuario", 0);
        await CargarSucursales();
        await CargarContactosModal();
    }

    private async Task CargarSucursales()
    {
        sucursales = await ChatService.GetSucursalesAsync();
    }

    private async Task CargarContactosModal()
    {
        var allContacts = await ChatService.BuscarContactosAsync(modalSearchTerm, modalSelectedSucursalId);
        // Excluir al usuario actual
        modalContactos = allContacts.Where(c => c.Id != myUserIdInt).ToList();
        StateHasChanged();
    }

    private async Task BuscarContactos()
    {
        await CargarContactosModal();
    }

    private async Task CreateGroup()
    {
        showGroupValidationError = false;
        var seleccionados = modalContactos.Where(c => c.Selected).Select(c => c.Id).ToList();
        if (string.IsNullOrWhiteSpace(newGroupName) || seleccionados.Count < 2)
        {
            showGroupValidationError = true;
            return;
        }
        var payload = new CrearConversacionRequest
        {
            ParticipantesIds = seleccionados,
            Tipo = "grupo",
            Nombre = newGroupName
        };
        var grupo = await ChatService.CrearConversacionAsync(payload);
        if (grupo != null)
            Navigation.NavigateTo($"/chat/{grupo.Id}");
    }

    private void VolverAContactos()
    {
        Navigation.NavigateTo("/contactos");
    }
}
