@using Microsoft.AspNetCore.Components
@using ManyBox.Models.Custom
@inject ManyBox.Services.ChatApiService ChatService
@inject HttpClient Http
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

<div class="mb-chat-messages-container" @ref="messagesContainer">
    <ul class="mb-chat-messages">
        @if (Mensajes != null && Mensajes.Any())
        {
            foreach (var msg in Mensajes)
            {
                <li class="mb-chat-message @(msg.UsuarioId == MyUserId ? "mb-own" : null)">
                    <div class="mb-chat-message-header">
                        <span class="mb-chat-user">@msg.UsuarioNombre</span>
                        <span class="mb-chat-date">@msg.FechaCreacion.ToString("g")</span>
                        @if (msg.Editado)
                        {
                            <span class="mb-chat-edited">(editado)</span>
                        }
                        <div class="mb-chat-options-dropdown">
                            <button class="mb-chat-options-btn" @onclick:stopPropagation="true" @onclick="() => ToggleDropdown(msg.Id)"><i class="fas fa-ellipsis-v"></i></button>
                            @if (dropdownOpenId == msg.Id)
                            {
                                <div class="mb-chat-options-menu">
                                    @if (msg.UsuarioId == MyUserId)
                                    {
                                        <button @onclick:stopPropagation="true" @onclick="() => OnEditMensaje.InvokeAsync(msg.Id)"><i class="fas fa-pen"></i> Editar</button>
                                        <button style="color:#ffb4b4" @onclick:stopPropagation="true" @onclick="() => OnDeleteMensaje.InvokeAsync(msg.Id)"><i class="fas fa-trash"></i> Eliminar</button>
                                    }
                                    <button @onclick:stopPropagation="true" @onclick="() => { replyingToId = msg.Id; OnReplyMensaje.InvokeAsync(msg.Id); }"><i class="fas fa-reply"></i> Responder</button>
                                    @if (EsSuperAdmin && ConversacionParticipantes != null)
                                    {
                                        <button @onclick:stopPropagation="true" @onclick="() => OnDeleteChat.InvokeAsync(msg.ConversacionId)"><i class="fas fa-broom"></i> Limpiar chat</button>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mb-chat-content">
                        @if (!string.IsNullOrEmpty(msg.ArchivoUrl))
                        {
                            <div class="mb-chat-file-attachment" style="margin-bottom:6px;">
                                <a href="@GetArchivoUrl(msg.ArchivoUrl)" target="_blank" download style="color:#7ec4fa;text-decoration:underline;">
                                    <i class="fas fa-file"></i> @(!string.IsNullOrEmpty(msg.ArchivoNombreOriginal) ? msg.ArchivoNombreOriginal : "Archivo adjunto")
                                </a>
                            </div>
                        }
                        @msg.Contenido
                    </div>

                    @if (replyingToId == msg.Id)
                    {
                        <div style="display:flex;justify-content:flex-end;margin-top:8px;">
                            <button class="mb-btn-primary mb-btn-gradient mb-chat-send-btn" style="border-radius:8px;min-width:120px;" @onclick="() => ConfirmReply(msg)"><i class="fas fa-reply"></i> Responder</button>
                        </div>
                    }

                    @if (msg.UsuarioId == MyUserId)
                    {
                        <div style="display:flex;justify-content:flex-end;align-items:center;margin-top:2px;">
                            <span style="font-size:0.85em;color:#7ec4fa;min-width:80px;text-align:right;">@GetEstadoMensaje(msg.Id)</span>
                        </div>
                    }
                </li>
            }
        }
    </ul>
</div>

@code {
    [Parameter] public List<MensajeModel> Mensajes { get; set; } = new();
    [Parameter] public int MyUserId { get; set; }
    [Parameter] public EventCallback<long> OnDeleteMensaje { get; set; }
    [Parameter] public EventCallback<int> OnDeleteChat { get; set; }
    [Parameter] public bool EsSuperAdmin { get; set; }
    [Parameter] public List<UsuarioContactoVM>? ConversacionParticipantes { get; set; }
    [Parameter] public EventCallback<long> OnEditMensaje { get; set; }
    [Parameter] public EventCallback<long> OnReplyMensaje { get; set; }
    [Parameter] public EventCallback<MensajeModel> OnConfirmReply { get; set; }

    private long? dropdownOpenId = null;
    private long? replyingToId = null;
    private Dictionary<long, string> estadosMensajes = new();
    private ElementReference messagesContainer;

    protected override async Task OnParametersSetAsync()
    {
        await CargarEstadosMensajes();
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesContainer);
    }

    private async Task CargarEstadosMensajes()
    {
        var mensajesSnapshot = Mensajes.Where(m => m.UsuarioId == MyUserId).ToList();
        var estadosMensajesLocal = new Dictionary<long, string>();
        foreach (var msg in mensajesSnapshot)
        {
            var estados = await ChatService.GetEstadosMensajeAsync(msg.Id);
            if (estados.Any(e => e.Estado == "leido" && e.UsuarioId != MyUserId))
                estadosMensajesLocal[msg.Id] = "Leído";
            else if (estados.Any(e => e.Estado == "enviado" && e.UsuarioId != MyUserId))
                estadosMensajesLocal[msg.Id] = "Enviado";
            else
                estadosMensajesLocal[msg.Id] = "Enviando...";
        }
        estadosMensajes = estadosMensajesLocal;
        StateHasChanged();
    }

    private string GetEstadoMensaje(long mensajeId)
    {
        if (estadosMensajes.TryGetValue(mensajeId, out var estado))
            return estado;
        return string.Empty;
    }

    private string GetArchivoUrl(string? archivoUrl)
    {
        if (string.IsNullOrWhiteSpace(archivoUrl)) return string.Empty;
        if (archivoUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase)) return archivoUrl;
        var baseApi = Http.BaseAddress?.ToString().TrimEnd('/') ?? string.Empty;
        return string.IsNullOrEmpty(baseApi) ? archivoUrl : ($"{baseApi}{archivoUrl}");
    }

    private void ToggleDropdown(long id)
    {
        dropdownOpenId = dropdownOpenId == id ? null : id;
        StateHasChanged();
    }
    private void ConfirmReply(MensajeModel msg)
    {
        replyingToId = null;
        OnConfirmReply.InvokeAsync(msg);
    }
    public void SetReplyingTo(long? id)
    {
        replyingToId = id;
        StateHasChanged();
    }
}