@page "/contactos"
@using ManyBox.Models.Custom
@using ManyBox.Services
@inject ChatApiService ChatService
@inject NavigationManager Navigation
@inject UserService UserService
@using Microsoft.Maui.Storage

<div class="contactos-container">
    <div class="contactos-header">
        <h2>Contactos</h2>
        <button class="mb-btn-primary mb-btn-gradient" @onclick="IrACrearGrupo">Crear Grupo</button>
    </div>

    <div class="contactos-filtros" style="display: flex; flex-direction: column; gap: 16px; max-width: 400px; margin-bottom: 32px;">
        <input class="form-control" style="margin-bottom: 8px;" placeholder="Buscar por nombre, apellido o usuario" @bind="searchTerm" @bind:event="oninput" />
        <select class="form-control" style="margin-bottom: 8px;" @bind="selectedSucursalId">
            <option value="">Todas las sucursales</option>
            @foreach (var suc in sucursales)
            {
                <option value="@suc.Id">@suc.Nombre</option>
            }
        </select>
        <button class="mb-btn-primary" style="align-self: flex-start;" @onclick="BuscarContactos">Buscar</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (showCreateGroup)
    {
        <div class="modal contactos-modal" style="min-width: 400px; max-width: 480px;">
            <h3>Crear nuevo grupo</h3>
            <div style="display: flex; flex-direction: column; gap: 16px;">
                <div>
                    <label>Nombre del grupo:</label>
                    <input @bind="newGroupName" placeholder="Nombre del grupo" class="form-control" />
                </div>
                <div style="display: flex; gap: 8px; align-items: flex-end;">
                    <div style="flex: 2;">
                        <label>Buscar contacto:</label>
                        <input class="form-control" placeholder="Buscar..." @bind="modalSearchTerm" @bind:event="oninput" />
                    </div>
                    <div style="flex: 1;">
                        <label>Sucursal:</label>
                        <select class="form-control" @bind="modalSelectedSucursalId">
                            <option value="">Todas</option>
                            @foreach (var suc in sucursales)
                            {
                                <option value="@suc.Id">@suc.Nombre</option>
                            }
                        </select>
                    </div>
                </div>
                <div style="max-height: 260px; overflow-y: auto; margin-top: 8px;">
                    @foreach (var contact in modalContactos)
                    {
                        <label class="miembro-item" style="display: flex; align-items: center; gap: 8px; margin-bottom: 6px;">
                            <input type="checkbox" @bind="contact.Selected" />
                            <span style="font-weight: 500;">@contact.Nombre @contact.Apellido</span>
                            <span style="color:#aaa; font-size:0.95em;">(@contact.SucursalNombre)</span>
                        </label>
                    }
                </div>
                <div style="font-size:0.95em; color:#888; margin-bottom: 4px;">@modalContactos.Count(c => c.Selected) miembros seleccionados</div>
                <div class="modal-actions" style="display: flex; justify-content: flex-end; gap: 12px;">
                    <button class="btn btn-secondary" @onclick="()=>showCreateGroup=false">Cancelar</button>
                    <button class="mb-btn-primary mb-btn-gradient" @onclick="CreateGroup" disabled="@(string.IsNullOrWhiteSpace(newGroupName) || modalContactos.Count(c => c.Selected) < 2)">Crear Grupo</button>
                </div>
                @if (showGroupValidationError)
                {
                    <div style="color: #e74c3c; font-size: 0.95em;">Debes ingresar un nombre y seleccionar al menos 2 miembros.</div>
                }
            </div>
        </div>
    }

    <div class="contactos-lista">
        @foreach (var contacto in contactos)
        {
            if (contacto.Id != myUserIdInt)
            {
                <div class="contacto-item">
                    <div class="contacto-nombre">@contacto.Nombre @contacto.Apellido <span style="color:#aaa;font-size:0.95em">(@contacto.SucursalNombre)</span></div>
                    <button class="mb-btn-primary mb-btn-gradient" @onclick="() => IniciarChat(contacto.Id)">Iniciar chat</button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<UsuarioContactoVM> contactos = new();
    private List<SucursalModel> sucursales = new();
    private bool showCreateGroup = false;
    private string newGroupName = "";
    private int myUserIdInt;
    private string? myRol;
    private string? errorMessage;
    private string searchTerm = "";
    private int? selectedSucursalId;

    // Para el modal de grupo
    private string modalSearchTerm = "";
    private int? modalSelectedSucursalId;
    private List<UsuarioContactoVM> modalContactos = new();
    private bool showGroupValidationError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarSucursales();
            await BuscarContactos();
            myUserIdInt = Preferences.Default.Get("idUsuario", 0);
            var usuario = await UserService.GetUsuarioActualAsync();
            myRol = usuario?.Email == "superadmin@manybox.com" ? "superadmin" : null;
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            errorMessage = "No se pudo conectar con el servidor. Verifica tu conexión o vuelve a intentarlo.";
        }
        catch (System.Exception ex)
        {
            errorMessage = "Ocurrió un error inesperado al cargar los contactos.";
        }
    }

    private async Task CargarSucursales()
    {
        try
        {
            var result = await ChatService.GetSucursalesAsync();
            sucursales = result;
        }
        catch { }
    }

    private async Task BuscarContactos()
    {
        contactos = await ChatService.BuscarContactosAsync(searchTerm, selectedSucursalId);
    }

    private void ShowCreateGroupDialog()
    {
        showCreateGroup = true;
        modalSearchTerm = "";
        modalSelectedSucursalId = null;
        _ = CargarContactosModal();
    }

    private async Task CargarContactosModal()
    {
        modalContactos = await ChatService.BuscarContactosAsync(modalSearchTerm, modalSelectedSucursalId);
        StateHasChanged();
    }

    private async Task CreateGroup()
    {
        showGroupValidationError = false;
        var seleccionados = modalContactos.Where(c => c.Selected).Select(c => c.Id).ToList();
        if (string.IsNullOrWhiteSpace(newGroupName) || seleccionados.Count < 2)
        {
            showGroupValidationError = true;
            return;
        }
        var payload = new CrearConversacionRequest
        {
            ParticipantesIds = seleccionados,
            Tipo = "grupo",
            Nombre = newGroupName
        };
        var grupo = await ChatService.CrearConversacionAsync(payload);
        showCreateGroup = false;
        if (grupo != null)
            Navigation.NavigateTo($"/chat/{grupo.Id}");
    }

    private async Task IniciarChat(int usuarioDestinoId)
    {
        if (usuarioDestinoId == myUserIdInt)
            return;
        var chatExistente = await ChatService.BuscarConversacionDirectaAsync(myUserIdInt, usuarioDestinoId);
        if (chatExistente != null)
        {
            Navigation.NavigateTo($"/chat/{chatExistente.Id}");
            return;
        }
        var payload = new CrearConversacionRequest
        {
            ParticipantesIds = new List<int> { usuarioDestinoId },
            Tipo = "directo"
        };
        var conversacion = await ChatService.CrearConversacionAsync(payload);
        if (conversacion != null)
            Navigation.NavigateTo($"/chat/{conversacion.Id}");
    }

    private bool EsSuperAdmin => myRol == "superadmin";

    private void IrACrearGrupo()
    {
        Navigation.NavigateTo("/crear-grupo");
    }
}
