@* ChatWindow.razor *@
@using Microsoft.AspNetCore.Components

@if (ContactoSeleccionado != null)
{
    <div class="chat-container">
        <div class="chat-header">
            <button class="btn btn-link" @onclick="OnBack">?</button>
            <span class="avatar">@ContactoSeleccionado.Nombre.Substring(0,1).ToUpper()</span>
            <b>@ContactoSeleccionado.Nombre</b>
            @if (!string.IsNullOrWhiteSpace(ContactoSeleccionado.Sucursal))
            {
                <span style="font-size:0.9em;color:#888;margin-left:8px;">@ContactoSeleccionado.Sucursal</span>
            }
        </div>
        <div class="messages" @ref="messagesDiv">
            @foreach (var mensaje in MensajesFiltrados)
            {
                <Message Mensaje="mensaje" EsMio="(mensaje.Emisor == NombreUsuario)" />
            }
        </div>
        <div class="input-row">
            <textarea class="form-control" placeholder="Escribe un mensaje..." @bind="NuevoMensaje" rows="2"></textarea>
            <button class="btn btn-primary mt-2" @onclick="EnviarMensaje" disabled="@string.IsNullOrWhiteSpace(NuevoMensaje)">Enviar</button>
        </div>
    </div>
}

@code {
    [Parameter] public Empleado? ContactoSeleccionado { get; set; }
    [Parameter] public string NombreUsuario { get; set; } = string.Empty;
    [Parameter] public List<Mensaje> Mensajes { get; set; } = new();
    [Parameter] public EventCallback OnBack { get; set; }

    private string NuevoMensaje = string.Empty;
    private ElementReference messagesDiv;

    private IEnumerable<Mensaje> MensajesFiltrados =>
        Mensajes.Where(m => (m.Emisor == NombreUsuario && m.Destinatario == ContactoSeleccionado?.Nombre)
                        || (m.Emisor == ContactoSeleccionado?.Nombre && m.Destinatario == NombreUsuario));

    private void EnviarMensaje()
    {
        if (!string.IsNullOrWhiteSpace(NombreUsuario) && !string.IsNullOrWhiteSpace(NuevoMensaje) && ContactoSeleccionado != null)
        {
            var mensaje = new Mensaje
            {
                Emisor = NombreUsuario,
                Destinatario = ContactoSeleccionado.Nombre,
                Contenido = NuevoMensaje,
                Fecha = DateTime.Now
            };
            ChatService.EnviarMensaje(mensaje);
            NuevoMensaje = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", messagesDiv);
    }

    [Inject] IJSRuntime JS { get; set; } = default!;

    // Reutiliza las clases de Chat.razor o Message.razor
    public class Empleado
    {
        public string Nombre { get; set; } = string.Empty;
        public bool Activo { get; set; }
        public string Sucursal { get; set; } = string.Empty;
    }
    public class Mensaje
    {
        public string Emisor { get; set; } = string.Empty;
        public string Destinatario { get; set; } = string.Empty;
        public string Contenido { get; set; } = string.Empty;
        public DateTime Fecha { get; set; } = DateTime.Now;
    }
    public static class ChatService
    {
        public static List<Mensaje> Mensajes { get; } = new();
        public static event Action? OnMensajeRecibido;
        public static void EnviarMensaje(Mensaje mensaje)
        {
            Mensajes.Add(mensaje);
            OnMensajeRecibido?.Invoke();
        }
    }
}
